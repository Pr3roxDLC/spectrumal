/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WordGuess } from './WordGuess';
import {
    WordGuessFromJSON,
    WordGuessFromJSONTyped,
    WordGuessToJSON,
    WordGuessToJSONTyped,
} from './WordGuess';
import type { Dimension } from './Dimension';
import {
    DimensionFromJSON,
    DimensionFromJSONTyped,
    DimensionToJSON,
    DimensionToJSONTyped,
} from './Dimension';
import type { Point } from './Point';
import {
    PointFromJSON,
    PointFromJSONTyped,
    PointToJSON,
    PointToJSONTyped,
} from './Point';

/**
 * 
 * @export
 * @interface RoundInfo
 */
export interface RoundInfo {
    /**
     * 
     * @type {number}
     * @memberof RoundInfo
     */
    round?: number;
    /**
     * 
     * @type {Array<Dimension>}
     * @memberof RoundInfo
     */
    dimensions?: Array<Dimension>;
    /**
     * 
     * @type {string}
     * @memberof RoundInfo
     */
    roundState?: RoundInfoRoundStateEnum;
    /**
     * 
     * @type {Point}
     * @memberof RoundInfo
     */
    target?: Point;
    /**
     * 
     * @type {WordGuess}
     * @memberof RoundInfo
     */
    wordGuess?: WordGuess;
}


/**
 * @export
 */
export const RoundInfoRoundStateEnum = {
    FindClue: 'FIND_CLUE',
    FindPoint: 'FIND_POINT',
    ShowResults: 'SHOW_RESULTS',
    Over: 'OVER'
} as const;
export type RoundInfoRoundStateEnum = typeof RoundInfoRoundStateEnum[keyof typeof RoundInfoRoundStateEnum];


/**
 * Check if a given object implements the RoundInfo interface.
 */
export function instanceOfRoundInfo(value: object): value is RoundInfo {
    return true;
}

export function RoundInfoFromJSON(json: any): RoundInfo {
    return RoundInfoFromJSONTyped(json, false);
}

export function RoundInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoundInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'round': json['round'] == null ? undefined : json['round'],
        'dimensions': json['dimensions'] == null ? undefined : ((json['dimensions'] as Array<any>).map(DimensionFromJSON)),
        'roundState': json['roundState'] == null ? undefined : json['roundState'],
        'target': json['target'] == null ? undefined : PointFromJSON(json['target']),
        'wordGuess': json['wordGuess'] == null ? undefined : WordGuessFromJSON(json['wordGuess']),
    };
}

export function RoundInfoToJSON(json: any): RoundInfo {
    return RoundInfoToJSONTyped(json, false);
}

export function RoundInfoToJSONTyped(value?: RoundInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'round': value['round'],
        'dimensions': value['dimensions'] == null ? undefined : ((value['dimensions'] as Array<any>).map(DimensionToJSON)),
        'roundState': value['roundState'],
        'target': PointToJSON(value['target']),
        'wordGuess': WordGuessToJSON(value['wordGuess']),
    };
}

