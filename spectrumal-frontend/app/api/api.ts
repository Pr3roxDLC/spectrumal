/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI
 * OpenAPI
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateGameResponse
 */
export interface CreateGameResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateGameResponse
     */
    'id'?: string;
    /**
     * 
     * @type {Array<User>}
     * @memberof CreateGameResponse
     */
    'users'?: Array<User>;
}
/**
 * 
 * @export
 * @interface CreateLobbyRequest
 */
export interface CreateLobbyRequest {
    /**
     * 
     * @type {User}
     * @memberof CreateLobbyRequest
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface CreateLobbyResponse
 */
export interface CreateLobbyResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateLobbyResponse
     */
    'lobbyId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateLobbyResponse
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface Dimension
 */
export interface Dimension {
    /**
     * 
     * @type {string}
     * @memberof Dimension
     */
    'left'?: string;
    /**
     * 
     * @type {string}
     * @memberof Dimension
     */
    'right'?: string;
}
/**
 * 
 * @export
 * @interface JoinLobbyRequest
 */
export interface JoinLobbyRequest {
    /**
     * 
     * @type {string}
     * @memberof JoinLobbyRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof JoinLobbyRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface JoinLobbyResponse
 */
export interface JoinLobbyResponse {
    /**
     * 
     * @type {string}
     * @memberof JoinLobbyResponse
     */
    'lobbyId'?: string;
    /**
     * 
     * @type {Array<User>}
     * @memberof JoinLobbyResponse
     */
    'users'?: Array<User>;
}
/**
 * 
 * @export
 * @interface Point
 */
export interface Point {
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'dim1'?: number;
    /**
     * 
     * @type {number}
     * @memberof Point
     */
    'dim2'?: number;
}
/**
 * 
 * @export
 * @interface PointGuessRequest
 */
export interface PointGuessRequest {
    /**
     * 
     * @type {Point}
     * @memberof PointGuessRequest
     */
    'guess'?: Point;
}
/**
 * 
 * @export
 * @interface RoundInfo
 */
export interface RoundInfo {
    /**
     * 
     * @type {number}
     * @memberof RoundInfo
     */
    'round'?: number;
    /**
     * 
     * @type {Array<Dimension>}
     * @memberof RoundInfo
     */
    'dimensions'?: Array<Dimension>;
    /**
     * 
     * @type {string}
     * @memberof RoundInfo
     */
    'roundState'?: RoundInfoRoundStateEnum;
    /**
     * 
     * @type {Point}
     * @memberof RoundInfo
     */
    'target'?: Point;
    /**
     * 
     * @type {WordGuess}
     * @memberof RoundInfo
     */
    'wordGuess'?: WordGuess;
}

export const RoundInfoRoundStateEnum = {
    FindClue: 'FIND_CLUE',
    FindPoint: 'FIND_POINT',
    ShowResults: 'SHOW_RESULTS',
    Over: 'OVER'
} as const;

export type RoundInfoRoundStateEnum = typeof RoundInfoRoundStateEnum[keyof typeof RoundInfoRoundStateEnum];

/**
 * 
 * @export
 * @interface RoundInfoResponse
 */
export interface RoundInfoResponse {
    /**
     * 
     * @type {string}
     * @memberof RoundInfoResponse
     */
    'gameId'?: string;
    /**
     * 
     * @type {number}
     * @memberof RoundInfoResponse
     */
    'roundNumber'?: number;
    /**
     * 
     * @type {RoundInfo}
     * @memberof RoundInfoResponse
     */
    'round'?: RoundInfo;
}
/**
 * 
 * @export
 * @interface Score
 */
export interface Score {
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof Score
     */
    'previousScores'?: { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof Score
     */
    'gainedScores'?: { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof Score
     */
    'newScores'?: { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: Point; }}
     * @memberof Score
     */
    'userGuesses'?: { [key: string]: Point; };
}
/**
 * 
 * @export
 * @interface ScoreResponse
 */
export interface ScoreResponse {
    /**
     * 
     * @type {Score}
     * @memberof ScoreResponse
     */
    'score'?: Score;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface WordGuess
 */
export interface WordGuess {
    /**
     * 
     * @type {string}
     * @memberof WordGuess
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof WordGuess
     */
    'word'?: string;
}
/**
 * 
 * @export
 * @interface WordGuessRequest
 */
export interface WordGuessRequest {
    /**
     * 
     * @type {string}
     * @memberof WordGuessRequest
     */
    'word'?: string;
}
/**
 * 
 * @export
 * @interface WordGuessResponse
 */
export interface WordGuessResponse {
    /**
     * 
     * @type {string}
     * @memberof WordGuessResponse
     */
    'dummy'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateLobbyRequest} [createLobbyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createLobbyRequest?: CreateLobbyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lobby/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createLobbyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} lobbyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGame: async (lobbyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lobbyId' is not null or undefined
            assertParamExists('createGame', 'lobbyId', lobbyId)
            const localVarPath = `/game/create/{lobbyId}`
                .replace(`{${"lobbyId"}}`, encodeURIComponent(String(lobbyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {number} round 
         * @param {string} player 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoundInfo: async (id: string, round: number, player: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRoundInfo', 'id', id)
            // verify required parameter 'round' is not null or undefined
            assertParamExists('getRoundInfo', 'round', round)
            // verify required parameter 'player' is not null or undefined
            assertParamExists('getRoundInfo', 'player', player)
            const localVarPath = `/game/{id}/round/{round}/{player}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"round"}}`, encodeURIComponent(String(round)))
                .replace(`{${"player"}}`, encodeURIComponent(String(player)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScore: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getScore', 'id', id)
            const localVarPath = `/game/{id}/score`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} player 
         * @param {PointGuessRequest} [pointGuessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guessPoint: async (id: string, player: string, pointGuessRequest?: PointGuessRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('guessPoint', 'id', id)
            // verify required parameter 'player' is not null or undefined
            assertParamExists('guessPoint', 'player', player)
            const localVarPath = `/game/{id}/guess/point/{player}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"player"}}`, encodeURIComponent(String(player)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pointGuessRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} player 
         * @param {WordGuessRequest} [wordGuessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guessWord: async (id: string, player: string, wordGuessRequest?: WordGuessRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('guessWord', 'id', id)
            // verify required parameter 'player' is not null or undefined
            assertParamExists('guessWord', 'player', player)
            const localVarPath = `/game/{id}/guess/word/{player}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"player"}}`, encodeURIComponent(String(player)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(wordGuessRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {JoinLobbyRequest} [joinLobbyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinLobby: async (code: string, joinLobbyRequest?: JoinLobbyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('joinLobby', 'code', code)
            const localVarPath = `/lobby/join/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(joinLobbyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateLobbyRequest} [createLobbyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createLobbyRequest?: CreateLobbyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLobbyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createLobbyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} lobbyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGame(lobbyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateGameResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGame(lobbyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createGame']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {number} round 
         * @param {string} player 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoundInfo(id: string, round: number, player: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoundInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoundInfo(id, round, player, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRoundInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScoreResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScore(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getScore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} player 
         * @param {PointGuessRequest} [pointGuessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async guessPoint(id: string, player: string, pointGuessRequest?: PointGuessRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.guessPoint(id, player, pointGuessRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.guessPoint']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} player 
         * @param {WordGuessRequest} [wordGuessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async guessWord(id: string, player: string, wordGuessRequest?: WordGuessRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WordGuessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.guessWord(id, player, wordGuessRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.guessWord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} code 
         * @param {JoinLobbyRequest} [joinLobbyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinLobby(code: string, joinLobbyRequest?: JoinLobbyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JoinLobbyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.joinLobby(code, joinLobbyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.joinLobby']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateLobbyRequest} [createLobbyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(createLobbyRequest?: CreateLobbyRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateLobbyResponse> {
            return localVarFp.create(createLobbyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} lobbyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGame(lobbyId: string, options?: RawAxiosRequestConfig): AxiosPromise<CreateGameResponse> {
            return localVarFp.createGame(lobbyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {number} round 
         * @param {string} player 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoundInfo(id: string, round: number, player: string, options?: RawAxiosRequestConfig): AxiosPromise<RoundInfoResponse> {
            return localVarFp.getRoundInfo(id, round, player, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScore(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ScoreResponse> {
            return localVarFp.getScore(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} player 
         * @param {PointGuessRequest} [pointGuessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guessPoint(id: string, player: string, pointGuessRequest?: PointGuessRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.guessPoint(id, player, pointGuessRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} player 
         * @param {WordGuessRequest} [wordGuessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        guessWord(id: string, player: string, wordGuessRequest?: WordGuessRequest, options?: RawAxiosRequestConfig): AxiosPromise<WordGuessResponse> {
            return localVarFp.guessWord(id, player, wordGuessRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {JoinLobbyRequest} [joinLobbyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinLobby(code: string, joinLobbyRequest?: JoinLobbyRequest, options?: RawAxiosRequestConfig): AxiosPromise<JoinLobbyResponse> {
            return localVarFp.joinLobby(code, joinLobbyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {CreateLobbyRequest} [createLobbyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public create(createLobbyRequest?: CreateLobbyRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).create(createLobbyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} lobbyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createGame(lobbyId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createGame(lobbyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {number} round 
     * @param {string} player 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRoundInfo(id: string, round: number, player: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRoundInfo(id, round, player, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getScore(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getScore(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} player 
     * @param {PointGuessRequest} [pointGuessRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public guessPoint(id: string, player: string, pointGuessRequest?: PointGuessRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).guessPoint(id, player, pointGuessRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} player 
     * @param {WordGuessRequest} [wordGuessRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public guessWord(id: string, player: string, wordGuessRequest?: WordGuessRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).guessWord(id, player, wordGuessRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {JoinLobbyRequest} [joinLobbyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public joinLobby(code: string, joinLobbyRequest?: JoinLobbyRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).joinLobby(code, joinLobbyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



